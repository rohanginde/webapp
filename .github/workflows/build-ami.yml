name: Build CI

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build CI
    runs-on: ubuntu-latest
    
    env:
      AUTOSCALING_GROUP_NAME: ${{ secrets.AUTOSCALING_GROUP_NAME }}
      LAUNCH_TEMPLATE_NAME: ${{ secrets.LAUNCH_TEMPLATE_NAME }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18

    - name: Display .env file
      run: |
        touch .env
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
        echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
        echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
        echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
        cat .env

    - name: configuremysql
      run: |
        sudo apt-get update
        sudo systemctl start mysql
        sudo systemctl status mysql
        mysql -u ${{ secrets.MYSQL_USER }} -p"${{ secrets.MYSQL_PASSWORD }}"
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: v18.17.1

    - name: install the dependencies
      run: npm install

    - name: run the integration
      run: |
        npm test

    - name: Zip webapp contents
      run: |
        zip -r webapp.zip ./

    - name: list files
      run: |
        ls -a
        current_directory=$(pwd)


    - name: Set up Packer
      run: |
        wget https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip
        unzip packer_1.7.3_linux_amd64.zip
        chmod +x packer
        sudo mv packer /usr/local/bin/
      shell: bash

    - name: Initialize Packer
      run: packer init .


    # - name: Build AMI
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    #   run: packer build ami.us-east-1.pkr.hcl
      
    # - name: Extract AMI ID from manifest.json
    #   run: |
    #     AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
    #     echo "AMI ID: $AMI_ID"
    #     echo "AMI_ID=$AMI" >> $GITHUB_ENV

    - name: Extract AMI ID from manifest.json
      run: |
        AMI_ID="ami-0ab996a92e57c0637"
        echo "AMI ID: $AMI_ID"
        echo "AMI_ID=$AMI" >> $GITHUB_ENV

        
    - name: Create Launch Template Version
      run: |
        # Add commands to create a new Launch Template version
        aws ec2 create-launch-template-version \
          --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
          --version-description "New version with latest AMI" \
          --source-version 1 --launch-template-data "{\"ImageId\":\"ami-0ab996a92e57c0637\"}"


          
    - name: Update Auto Scaling Group
      run: |
        # Add commands to update Auto Scaling Group to use the latest Launch Template version
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} \
          --launch-template LaunchTemplateName=${{ env.LAUNCH_TEMPLATE_NAME }}
          
    - name: Trigger Instance Refresh
      run: |
        # Add commands to trigger instance refresh using AWS CLI
        aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }}
    
    - name: Wait for Instance Refresh
      id: wait-for-refresh
      run: |
        # Add commands to wait for the instance refresh completion
        status="Pending"
        while [ "$status" != "Successful" ]; do
          sleep 60
          status=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} \
                    --query 'InstanceRefreshes[0].Status' \
                    --output text)
        done
        
    - name: Check Instance Refresh Status
      run: |
        # Add commands to check the instance refresh status
        echo "Instance Refresh Status: ${{ steps.wait-for-refresh.outputs.status }}"
        if [ "${{ steps.wait-for-refresh.outputs.status }}" != "Successful" ]; then
          echo "Instance refresh failed. Exiting workflow with an error."
          exit 1
        fi

        
  


